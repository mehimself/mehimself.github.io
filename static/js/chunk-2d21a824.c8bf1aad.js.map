{"version":3,"sources":["webpack:///./node_modules/mermaid/dist/infoDiagram-f8f76790.js"],"names":["parser","o","k","v","o2","l","length","$V0","parser2","trace","yy","symbols_","terminals_","2","4","6","9","10","productions_","performAction","yytext","yyleng","yylineno","yystate","$$","_$","setInfo","table","3","1","5","7","8","defaultActions","parseError","str","hash","recoverable","error","Error","this","parse","input","self","stack","tstack","vstack","lstack","TERROR","EOF","args","slice","call","arguments","lexer2","Object","create","lexer","sharedState","prototype","hasOwnProperty","setInput","yylloc","yyloc","push","ranges","options","lex","token","pop","Array","getPrototypeOf","symbol","state","action","r","p","len","newState","expected","yyval","errStr","showPosition","join","text","match","line","loc","$","first_line","last_line","first_column","last_column","range","apply","concat","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","lines","unput","split","substr","oldLines","more","reject","backtrack_lexer","less","n","pastInput","past","replace","upcomingInput","next","pre","c","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","i","flex","begin","condition","popState","conditions","topState","Math","abs","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","Parser","parser$1","DEFAULT_INFO_DB","info","toggle","getInfo","clear","db","draw","id","version","log","debug","svg","selectSvgElement","configureSvgSize","group","append","attr","style","renderer","diagram"],"mappings":"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","file":"static/js/chunk-2d21a824.c8bf1aad.js","sourcesContent":["import { l as log, A as selectSvgElement, i as configureSvgSize } from \"./mermaid-b5860b54.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"d3\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nvar parser = function() {\n  var o = function(k, v, o2, l) {\n    for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v)\n      ;\n    return o2;\n  }, $V0 = [6, 9, 10];\n  var parser2 = {\n    trace: function trace() {\n    },\n    yy: {},\n    symbols_: { \"error\": 2, \"start\": 3, \"info\": 4, \"document\": 5, \"EOF\": 6, \"line\": 7, \"statement\": 8, \"NL\": 9, \"showInfo\": 10, \"$accept\": 0, \"$end\": 1 },\n    terminals_: { 2: \"error\", 4: \"info\", 6: \"EOF\", 9: \"NL\", 10: \"showInfo\" },\n    productions_: [0, [3, 3], [5, 0], [5, 2], [7, 1], [7, 1], [8, 1]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n      $$.length - 1;\n      switch (yystate) {\n        case 1:\n          return yy;\n        case 4:\n          break;\n        case 6:\n          yy.setInfo(true);\n          break;\n      }\n    },\n    table: [{ 3: 1, 4: [1, 2] }, { 1: [3] }, o($V0, [2, 2], { 5: 3 }), { 6: [1, 4], 7: 5, 8: 6, 9: [1, 7], 10: [1, 8] }, { 1: [2, 1] }, o($V0, [2, 3]), o($V0, [2, 4]), o($V0, [2, 5]), o($V0, [2, 6])],\n    defaultActions: { 4: [2, 1] },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = \"\", yylineno = 0, yyleng = 0, TERROR = 2, EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer2 = Object.create(this.lexer);\n      var sharedState = { yy: {} };\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n      lexer2.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer2;\n      sharedState.yy.parser = this;\n      if (typeof lexer2.yylloc == \"undefined\") {\n        lexer2.yylloc = {};\n      }\n      var yyloc = lexer2.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer2.options && lexer2.options.ranges;\n      if (typeof sharedState.yy.parseError === \"function\") {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n      function lex() {\n        var token;\n        token = tstack.pop() || lexer2.lex() || EOF;\n        if (typeof token !== \"number\") {\n          if (token instanceof Array) {\n            tstack = token;\n            token = tstack.pop();\n          }\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n      var symbol, state, action, r, yyval = {}, p, len, newState, expected;\n      while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == \"undefined\") {\n            symbol = lex();\n          }\n          action = table[state] && table[state][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n          var errStr = \"\";\n          expected = [];\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\");\n            }\n          }\n          if (lexer2.showPosition) {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n          } else {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n          }\n          this.parseError(errStr, {\n            text: lexer2.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer2.yylineno,\n            loc: yyloc,\n            expected\n          });\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer2.yytext);\n            lstack.push(lexer2.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            {\n              yyleng = lexer2.yyleng;\n              yytext = lexer2.yytext;\n              yylineno = lexer2.yylineno;\n              yyloc = lexer2.yylloc;\n            }\n            break;\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n              yyval._$.range = [\n                lstack[lstack.length - (len || 1)].range[0],\n                lstack[lstack.length - 1].range[1]\n              ];\n            }\n            r = this.performAction.apply(yyval, [\n              yytext,\n              yyleng,\n              yylineno,\n              sharedState.yy,\n              action[1],\n              vstack,\n              lstack\n            ].concat(args));\n            if (typeof r !== \"undefined\") {\n              return r;\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n          case 3:\n            return true;\n        }\n      }\n      return true;\n    }\n  };\n  var lexer = function() {\n    var lexer2 = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function(input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = \"\";\n        this.conditionStack = [\"INITIAL\"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function() {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function(ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function() {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function() {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n        return this;\n      },\n      // retain first n characters of the match\n      less: function(n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function() {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function() {\n        var next = this.match;\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function() {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function(match, indexed_rule) {\n        var token, lines, backup;\n        if (this.options.backtrack_lexer) {\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n          this.done = false;\n        }\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n          return false;\n        }\n        return false;\n      },\n      // return next match in input\n      next: function() {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) {\n          this.done = true;\n        }\n        var token, match, tempMatch, index;\n        if (!this._more) {\n          this.yytext = \"\";\n          this.match = \"\";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue;\n              } else {\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index]);\n          if (token !== false) {\n            return token;\n          }\n          return false;\n        }\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: { \"case-insensitive\": true },\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        switch ($avoiding_name_collisions) {\n          case 0:\n            return 4;\n          case 1:\n            return 9;\n          case 2:\n            return \"space\";\n          case 3:\n            return 10;\n          case 4:\n            return 6;\n          case 5:\n            return \"TXT\";\n        }\n      },\n      rules: [/^(?:info\\b)/i, /^(?:[\\s\\n\\r]+)/i, /^(?:[\\s]+)/i, /^(?:showInfo\\b)/i, /^(?:$)/i, /^(?:.)/i],\n      conditions: { \"INITIAL\": { \"rules\": [0, 1, 2, 3, 4, 5], \"inclusive\": true } }\n    };\n    return lexer2;\n  }();\n  parser2.lexer = lexer;\n  function Parser() {\n    this.yy = {};\n  }\n  Parser.prototype = parser2;\n  parser2.Parser = Parser;\n  return new Parser();\n}();\nparser.parser = parser;\nconst parser$1 = parser;\nconst DEFAULT_INFO_DB = {\n  info: false\n};\nlet info = DEFAULT_INFO_DB.info;\nconst setInfo = (toggle) => {\n  info = toggle;\n};\nconst getInfo = () => info;\nconst clear = () => {\n  info = DEFAULT_INFO_DB.info;\n};\nconst db = {\n  clear,\n  setInfo,\n  getInfo\n};\nconst draw = (text, id, version) => {\n  log.debug(\"rendering info diagram\\n\" + text);\n  const svg = selectSvgElement(id);\n  configureSvgSize(svg, 100, 400, true);\n  const group = svg.append(\"g\");\n  group.append(\"text\").attr(\"x\", 100).attr(\"y\", 40).attr(\"class\", \"version\").attr(\"font-size\", 32).style(\"text-anchor\", \"middle\").text(`v${version}`);\n};\nconst renderer = { draw };\nconst diagram = {\n  parser: parser$1,\n  db,\n  renderer\n};\nexport {\n  diagram\n};\n"],"sourceRoot":""}